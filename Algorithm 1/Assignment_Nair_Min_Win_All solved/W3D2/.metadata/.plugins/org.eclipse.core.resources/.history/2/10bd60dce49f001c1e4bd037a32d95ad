package sortAlgorithm;

import java.util.Arrays;

public class HeapBottomUp {

    public static void main(String[] args) {
//        int[] array = new int[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
//        int[] array = new int[]{0, 2, 1, 4, 3, 6, 5, 8, 7, 10, 9, 12, 11, 14, 13, 16, 15};
//        int[] array = new int[]{0, 4, 2, 3, 1, 5, 8, 7, 6, 11, 10, 12, 9, 13, 14, 16, 15};
        int[] array = new int[]{0, 5, 6, 7, 4, 2, 3, 1, 8, 11, 13, 14, 16, 10, 12, 11, 9};

        HeapBottomUp heap = new HeapBottomUp();
        heap.sort(array, array.length);
        System.out.println(Arrays.toString(array));
    }

    protected void sort(int[] array, int size) {
        for (int i = size / 2; i >= 1; i--) {
            downHeap(array, size, i);
        }
    }

    private void downHeap(int[] array, int size, int index) {
        if (index * 2 <= size && (index * 2) + 1 <= size) {
            int biggestIndex = findBiggestIndexInArray(size, array, index, index * 2, (index * 2) + 1);
            if (biggestIndex != index) {
                swap(array, index, biggestIndex);
                downHeap(array, size, biggestIndex);
            }
        }
    }

    private void swap(int[] array, int index, int biggestIndex) {
        int temp = array[index];
        array[index] = array[biggestIndex];
        array[biggestIndex] = temp;
    }

    private int findBiggestIndexInArray(int size, int[] array, int parentIndex, int childIndex, int secondChildIndex) {
        if (childIndex > size - 1) return parentIndex;
        else if (secondChildIndex > size - 1)
            return array[parentIndex] > array[childIndex] ? parentIndex : childIndex;
        else {
            int checkFirstTwoIndex = array[parentIndex] > array[childIndex] ? parentIndex : childIndex;
            return array[secondChildIndex] > array[checkFirstTwoIndex] ? secondChildIndex : checkFirstTwoIndex;
        }
    }

}
